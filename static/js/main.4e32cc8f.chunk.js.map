{"version":3,"sources":["Styles.js","Components.js","App.js","serviceWorker.js","index.js"],"names":["calculateWidth","span","concat","GlobalStyle","createGlobalStyle","_templateObject","Wrapper","styled","div","_templateObject2","props","primary","Row","_templateObject3","Column","_templateObject4","_ref","xs","_ref2","sm","_ref3","md","_ref4","lg","Table","table","_templateObject5","ButtonStyle","button","_templateObject6","ModalWrapper","_templateObject7","QUERY","gql","Components_templateObject","CharacterQuery","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","history","characterData","id","historyId","showModal","showPreviousCharacter","bind","assertThisInitialized","forgetCharacter","hideModal","react_default","a","createElement","Components_CharacterView","imageURL","image","name","species","gender","type","status","Math","floor","random","setState","_this2","_this$state","react_apollo_esm","query","variables","onCompleted","data","character","loading","error","filter","element","updatedHistory","historyLength","alert","_this3","_this$state2","buttonText","Components_Button","onClick","generateId","length","executeQuery","renderCharacter","Components_PreviousCharactersView","show","forget","Component","CharacterView","src","alt","height","width","PreviousCharactersView","inverseHistory","slice","reverse","console","log","map","key","display","Button","children","client","ApolloClient","uri","App","Components_CharacterQuery","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e32cc8f.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components'\n\n// STYLES\n// Rows and columns\n// Column width calculator\nfunction calculateWidth(span) {\n  if (!span) return\n\n  let width = span / 12 * 100\n  return `width: ${width}%`\n}\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: #EFF4FF\n  }`\n\nconst Wrapper = styled.div`\n  background-color: ${props => props.primary\n    ? '#2b5797'\n    : 'transparent'}\n  possition: absolute;\n  top: ${props => props.primary\n    ? '10%'\n    : '90%'}\n  left: 1em;\n  width: 100%;\n`\n\nconst Row = styled.div`\n  padding: ${props => props.primary\n    ? '1em'\n    : '1em'}\n  font-size: ${props => props.primary\n    ? '1.5em'\n    : '1em'}\n  font-family: Arial, Helvetica, sans-serif;\n  color: ${props => props.primary\n    ? '#FFFFFF'\n    : '#2B5797'}\n  &::after {\n    content: \"\"\n    clear: both\n    display: table\n  }`\n\nconst Column = styled.div`\n  float: left\n  ${({ xs }) => xs\n    ? calculateWidth(xs)\n    : 'width: 100%'}\n  \n  @media only screen and (min-width: 768px) {\n    ${({ sm }) => sm && calculateWidth(sm)}\n  }\n  \n  @media only screen and (min-width: 992px) {\n    ${({ md }) => md && calculateWidth(md)}\n  }\n\n  @media only screen and (min-width: 1200px) {\n    ${({ lg }) => lg && calculateWidth(lg)}\n  }\n  `\n\n// Table style\nconst Table = styled.table`\n  width: 40%\n  th, td {\n    text-align: left\n  }\n  th, td {\n    border-bottom: 1px solid #2B5797\n    height: 20px\n  }\n  border-collapse: collapse`\n\n// Button style\nconst ButtonStyle = styled.button`\n  background: ${props => props.primary\n    ? '#2B5797'\n    : '#EFF4FF'}\n  color: ${props => props.primary\n    ? '#EFF4FF'\n    : '#2B5797'}\n  :hover {\n    color: ${props => props.primary\n    ? '#FFFFFF'\n    : '#000000'}\n  }\n  font-size: 1em\n  margin: 1em\n  border: 2px solid #2B5797\n  border-radius: 3px`\n\n// Modal wrapper\nconst ModalWrapper = styled.div`\n  position: absolute;\n  top: 13em;\n  left: 1em;\n  height: 60%\n  width: 100%;\n  padding: 1em;\n  background-color: #EFF4FF\n`\n\nexport { Row, Column, Table, ButtonStyle, ModalWrapper, Wrapper, GlobalStyle }","import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { gql } from 'apollo-boost'\n\nimport { Row, Column, Table, ButtonStyle, ModalWrapper, Wrapper } from './Styles'\n\n// Define Query const\nconst QUERY = gql`\n  query Character($id: ID!) {\n    character(id: $id) {\n      image\n      name\n      id\n      status\n      species\n      type\n      gender\n      origin { name }\n      location { name }\n      created\n    }\n  }`\n\n// COMPONENTS\n// Query class\nclass CharacterQuery extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [],\n      characterData: null,\n      id: null,\n      historyId: [],\n      showModal: false\n    }\n    this.showPreviousCharacter = this.showPreviousCharacter.bind(this)\n    this.forgetCharacter = this.forgetCharacter.bind(this)\n    this.showModal = this.showModal.bind(this)\n    this.hideModal = this.hideModal.bind(this)\n  }\n\n  renderCharacter() {\n    if(!this.state.characterData) {\n      return(\n        <Column xs='12'>\n          No se ha generado ningún personaje\n        </Column>\n      )\n    } else {\n      return(\n        <CharacterView\n          imageURL={this.state.characterData.image}\n          name={this.state.characterData.name}\n          id={this.state.characterData.id}\n          species={this.state.characterData.species}\n          gender={this.state.characterData.gender}\n          type={this.state.characterData.type}\n          status={this.state.characterData.status}\n          showModal={this.state.showModal}\n        />\n      )\n    }\n  }\n\n  generateId() {\n    const id = Math.floor(Math.random() * 493) + 1\n    this.setState({\n      id: id,\n      showModal: false\n    })\n\n  }\n\n  executeQuery() {\n    const { id, history, historyId } = this.state\n    if (id) {\n      return(\n        <Query\n          query={QUERY}\n          variables={{ id }}\n          onCompleted={data => this.setState({\n            characterData: data.character,\n            history: history.concat(data.character),\n            id: null,\n            historyId: historyId.concat(id)\n          })}\n        >\n        {({ loading, error, data }) => {\n          if(loading) return null\n          if(error) return <p>Ocurrió un error</p>\n          this.characterData = data\n          return null\n        }}\n      </Query>\n      )\n    } else {\n      return null\n    }\n  }\n\n  showPreviousCharacter(id) {\n    const { history } = this.state\n    const character = history.filter(element => element.id === id)\n    this.setState({\n      characterData: character[0],\n      showModal: false\n    })\n  }\n\n  forgetCharacter(id) {\n    const { history } = this.state\n    const updatedHistory = history.filter(element => element.id !== id)\n    this.setState({\n      history: updatedHistory\n    })\n  }\n\n  showModal(historyLength) {\n    if (!historyLength) {\n      return alert('No hay historial para mostrar')\n    }\n    this.setState({\n      showModal: true\n    })\n  }\n\n  hideModal() {\n    this.setState({\n      showModal: false\n    })\n  }\n\n  render() {\n    const { history, historyId, showModal } = this.state\n    let buttonText = showModal \n      ? 'Ocultar Historial'\n      : 'Mostrar Historial'\n    return (\n      <Wrapper primary={false}>\n        <Row primary={false}>\n          <Column xs='6'>\n            <Button\n              onClick={ () => this.generateId() }\n              primary={true}\n              >\n              Generar Personaje\n            </Button>\n          </Column>\n          <Column xs='6'>\n            <Button\n              onClick={ () => !showModal? this.showModal(history.length) : this.hideModal() }\n              primary={true}\n            >\n              {buttonText}\n            </Button>\n          </Column>\n        </Row>\n        <Row primary={false}>\n          {this.executeQuery()}\n          {this.renderCharacter()}\n        </Row>\n        <PreviousCharactersView \n          history={history} \n          show={this.showPreviousCharacter}\n          forget={this.forgetCharacter}\n          historyId={historyId}\n          showModal={showModal}\n        />\n      </Wrapper> \n    )\n  }\n}\n\n\n// Current character component\nconst CharacterView = (props) => {\n  const { imageURL, name, id, status, species, type, gender } = props\n  return(\n    <div>\n      <Column xs='12' sm='12' md='2' lg='2'>\n        <img src={imageURL} alt='Avatar' height='120' width='120'></img>\n      </Column>\n      <Column xs='12' sm='12' md='10' lg='10'>\n        <Table>\n          <tbody>\n            <tr>\n              <th>Name:</th>\n              <td>{name}</td>\n            </tr>\n            <tr>\n              <th>ID:</th>\n              <td>{id}</td>\n            </tr>\n            <tr>\n              <th>Status:</th>\n              <td>{status}</td>\n            </tr>\n            <tr>\n              <th>Species:</th>\n              <td>{species}</td>\n            </tr>\n            <tr>\n              <th>Type:</th>\n              <td>{type}</td>\n            </tr>\n            <tr>\n              <th>Gender:</th>\n              <td>{gender}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Column>\n\n    </div>  \n  )\n}\n\n// Previous characters component\nconst PreviousCharactersView = ({ history, show, forget, showModal }) => {\n  const inverseHistory = history.slice().reverse()\n  console.log(showModal)\n  if (history.length && showModal) {\n    return(\n      <ModalWrapper>\n        <Row primary={false}>\n          <Column xs='12'>\n            <Table>\n              <tbody>\n                {inverseHistory.map(character => {\n                  return(\n                    <tr key={character.id}>\n                      <td>\n                        <img src={character.image} alt='Avatar' height='50' width='50' display='inline-block'></img>\n                      </td>\n                      <td>\n                        Name: {character.name}\n                      </td>\n                      <td>\n                        <Button\n                          onClick={ () => show(character.id) }\n                          primary={false}\n                        >\n                          Show\n                        </Button>\n                      </td>\n                      <td>\n                        <Button\n                          onClick={ () => forget(character.id) }\n                          primary={false}\n                        >\n                          Forget\n                        </Button>\n                      </td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </Table>    \n          </Column>\n        </Row>\n      </ModalWrapper>\n    )\n  } else {\n    return null\n  }\n}\n\n// Button component\nconst Button = ({ onClick, primary, children }) => {\n  return (\n    <ButtonStyle\n      onClick={onClick}\n      type='button'\n      primary={primary}\n    >\n      {children}\n    </ButtonStyle>\n  )\n}\n\nexport { CharacterQuery, CharacterView, Button, PreviousCharactersView }","import React from 'react'\n\n// Import Apollo Packages\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from 'react-apollo'\n\n// Import Styles and Components\nimport { Row, Wrapper, GlobalStyle } from './Styles'\nimport { CharacterQuery } from './Components'\n\n// Create Apollo Client\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql'\n})\n\n// App component\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <GlobalStyle />\n      <Wrapper primary={true}>\n        <Row primary={true}>\n          <h3>Front-end Challenge</h3>\n        </Row>\n      </Wrapper>\n      <CharacterQuery />\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}